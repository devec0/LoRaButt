#include <U8g2lib.h>

#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
#endif

#include <LoRa.h>

#define SS 18
#define RST 14
#define DI0 26

#define threatbutt_width 64
#define threatbutt_height 64
static unsigned char threatbutt_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xc0, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x07,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xf8, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x1f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x1e, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xfc, 0xef, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xf7, 0x3a,
   0x00, 0x00, 0x1c, 0x00, 0x00, 0xd6, 0xfb, 0x3c, 0x00, 0x00, 0xe3, 0x00,
   0x00, 0x9e, 0x7b, 0x3c, 0x00, 0x00, 0x01, 0x07, 0x00, 0xaf, 0x7f, 0x3a,
   0x00, 0x00, 0x01, 0x08, 0x80, 0xcf, 0x2b, 0x7f, 0x00, 0x00, 0x29, 0x08,
   0x80, 0xef, 0xfb, 0x7b, 0x00, 0x80, 0x00, 0x09, 0x80, 0xe7, 0xcf, 0x76,
   0x00, 0x80, 0x10, 0x09, 0x00, 0xfb, 0xbf, 0x71, 0x00, 0x80, 0x44, 0x09,
   0x00, 0xe3, 0xef, 0xfc, 0x00, 0x40, 0x10, 0x05, 0x00, 0xff, 0x3d, 0x9f,
   0x00, 0x40, 0x82, 0x04, 0x00, 0x3e, 0xc7, 0x87, 0x00, 0x40, 0xa8, 0x04,
   0x00, 0xe6, 0xf0, 0x80, 0x01, 0x20, 0x82, 0x02, 0x00, 0x3e, 0x3e, 0x00,
   0x01, 0x20, 0x50, 0x02, 0x00, 0xe2, 0x07, 0x00, 0x03, 0x3e, 0x45, 0x02,
   0x00, 0xfe, 0x01, 0x14, 0x82, 0x21, 0x50, 0x01, 0x00, 0x1e, 0x00, 0x24,
   0x66, 0x10, 0x22, 0x01, 0x00, 0x04, 0x00, 0x20, 0x34, 0xf0, 0x27, 0x01,
   0x00, 0x04, 0x00, 0x28, 0x9c, 0x0f, 0x38, 0x01, 0x00, 0x04, 0x00, 0x48,
   0x08, 0x06, 0xb0, 0x00, 0x00, 0x04, 0x00, 0x40, 0x48, 0x01, 0xa0, 0x00,
   0x00, 0x08, 0x00, 0x50, 0x90, 0x00, 0xc0, 0x00, 0x00, 0x08, 0x00, 0x50,
   0x80, 0x00, 0x40, 0x00, 0x00, 0x08, 0x00, 0x90, 0x00, 0x10, 0x40, 0x00,
   0x00, 0x08, 0x00, 0xa0, 0x00, 0x00, 0x40, 0x00, 0x00, 0x10, 0x00, 0xa0,
   0x00, 0x00, 0x40, 0x00, 0x00, 0x30, 0x00, 0x20, 0x07, 0x00, 0x40, 0x00,
   0x00, 0x20, 0x00, 0x20, 0x10, 0x10, 0x20, 0x00, 0x00, 0x40, 0x00, 0x20,
   0x1f, 0x00, 0x20, 0x00, 0x00, 0xc0, 0x00, 0xc0, 0x02, 0x20, 0x30, 0x00,
   0x00, 0x80, 0x00, 0x90, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x60,
   0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0c, 0x00,
   0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,
   0x00, 0xd0, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x70, 0x00, 0x00,
   0x00, 0x00, 0x30, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
   0x80, 0x25, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0xe8, 0x24, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xfc, 0x1f, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0,
   0x80, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xc0, 0x4e, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xa0, 0xc0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0,
   0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x4e, 0x00, 0x00,
   0x00, 0x00, 0x00, 0xa2, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x80, 0xad,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00 };

U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, /* clock=*/ 15, /* data=*/ 4, /* reset=*/ 16);

int gfxrow = 0;

void setup() {

  Serial.begin(9600);
  u8g2.begin();
  
  u8g2.setFontMode(0);
  u8g2.setFontDirection(0);
  
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_t0_12b_tr);

  u8g2.drawStr(0, 8, "LoRA TX");
  u8g2.sendBuffer();

  SPI.begin(5, 19, 27, 18);
  LoRa.setPins(SS, RST, DI0);

  if (!LoRa.begin(433E6)) {
    u8g2.clearBuffer();
    u8g2.drawStr(0, 8, "LoRa failed!");
    u8g2.sendBuffer();
    while (1);
  }
  
  u8g2.drawStr(0, 8, "LoRa TX OK!");
  u8g2.sendBuffer();

}

void loop() {
  // send packet
  // we assume 64x64 = 4096 bits, 512 bytes (64x8)
  if (gfxrow == 64) { gfxrow = 0; }

  u8g2.clearBuffer();
  u8g2.drawStr(0, 8, "LoRA XBM TX");
  u8g2.drawXBM(65, 0, threatbutt_width, threatbutt_height, threatbutt_bits);
  u8g2.drawHLine(65, gfxrow, 64);
  u8g2.sendBuffer();    
    
  LoRa.beginPacket();
  //send offset as first byte

  uint8_t tx_buf[10];

  tx_buf[0] = gfxrow;
  tx_buf[9] = gfxrow;
  Serial.println("TX");
  for (int txbyte = 0; txbyte < 8; txbyte++)
  {
    tx_buf[txbyte+1] = threatbutt_bits[(gfxrow*8) + txbyte]; 
    Serial.print("Grabbing index: ");
    Serial.print((gfxrow*8) + txbyte);
    Serial.print(": ");
    Serial.println(threatbutt_bits[(gfxrow*8) + txbyte], BIN);
  }
  Serial.println((char*)tx_buf);
  LoRa.write(tx_buf, 10);
  LoRa.endPacket();
  
  delay(100);

  gfxrow++;
}
